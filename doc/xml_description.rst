XML description
---------------

AGWB uses :code:`XML` as file format for describing system registers.
There are predefined element names, that must be used for valid description.
Each element requires at least one mandatory attribute and may accept some optional attributes.

Why XML?
########

You may be wondering why :code:`XML`, why not someting more buzzy like :code:`JSON` or :code:`YAML`.
Well, :code:`XML` has something, that is particularly useful for describing hierarchical systems that neither :code:`JSON` nor :code:`YAML` have.
Namely, it distinguishes block attributes and elements.
Attributes function like a metadata of a block and elements are independent entities existing within outter element/block.
With :code:`JSON` or :code:`YAML` one would have to imitate this structure and it would feel somehow less intuitive.
:code:`JSON` also does not support comments, and with :code:`YAML` it is a bit harder to spot indentation mistakes in long blocks.

Valid Elements
##############

blackbox
~~~~~~~~
:code:`blackbox` element can be used for incorporating registers or blocks not generated by the AGWB.

Mandatory attributes:

#. :code:`name` - name of the blackbox instance within outter block.
#. :code:`type` - type of the blackbox.
#. :code:`addrbits` - number of lower address bits used by blackbox for internal addressing.
#. :code:`xmlpath` - relative path to *.xml* file with registers not generated by the AGWB.

block
~~~~~
:code:`block` element is used for grouping registers or other blocks.

Mandatory attribute:

#. :code:`name` - name of the block.

**Example**

.. code-block:: xml

   <block name="top">
      <blackbox name="EXTHUGE" type="HTEST" addrbits="16" />
      <subblock name="LINKS" type="SYS1" reps="NSEL_MAX"/>
      <creg name="CTRL" desc="Control register in the top block" default="0x11">
         <field name="CLK_FREQ" width="4"/>
         <field name="PLL_RESET" width="1"/>
      </creg>
   </block>

:code:`creg` can contain :code:`field` elements, see :ref:`field`.

constant
~~~~~~~~
:code:`constant` allows for definig constant number, which can later be used for parameterizing registers or blocks.

Mandatory attributes:

#. :code:`name` - name of the constant.
#. :code:`val`- value of the constant.

**Example**

.. code-block:: xml

   <constant name="NUMBER_OF_BITS" val="3" />

creg
~~~~
:code:`creg` stands for *control register* and should be used to describe registers that are supposed to be both written and read by the software.

Mandatory attribute:

#. :code:`name` - name of the control register.

Optional attributes:

#. :code:`default` - default value stored in the register, this value is also applied after reset.
#. :code:`desc` - extra description of the control register.
#. :code:`mode` - ???
#. :code:`reps` - number of instances of given register, useful for defining vector of registers.
#. :code:`stb` - setting this to :code:`1` enables the *stb* signal, that is asserted for one clock pulse whenever the new value is written. Useful for FIFO write.
#. :code:`stype` - ???
#. :code:`type` - ???
#. :code:`width` - width of the register in bits.

field
~~~~~
:code:`field` element is used to define bit fields within register.

Mandatory attributes:

#. :code:`name` - name of the field.
#. :code:`width` - width of the field in bits.

Optional attribute:

#. :code:`type` - ???

**Example**

.. code-block:: xml

   <sreg name="throughput">
      <field name="val" width="30" type="unsigned" />
      <field name="prev_missed" width="1" />
      <field name="read" width="1" />
   </sreg>

include
~~~~~~~
:code:`include` element allows including *.xml* files.
This is very useful functionality, as different modules can be placed in different repositories and reused in different projects.
Each module (entity) can have its own *.xml* file with block definition related strictly to this module.

**Example**

.. code-block:: xml

   <include path="relative/path/to/block.xml"/>


sysdef
~~~~~~
:code:`sysdef` must be a root element.

Mandatory attribute:

#. :code:`top` - designates the block which should be used as a top level for registers generation.

Optional attribute:

#. :code:`masters` - number of Wishbone masters controlling the local bus (default value is 1).

**Example**

.. code-block:: xml

   <sysdef top="foo" masters="2">
      <block name="foo">
         ...
      </block>

      <block name="bar">
         ...
      </block>
   </sysdef>

sreg
~~~~
:code:`sreg` stands for *status register* and should be used to describe registers that are supposed to be read only by software.


Mandatory attribute:

#. :code:`name` - name of the status register.

Optional attributes:

#. :code:`ack` - setting this to :code:`1` enables the *ack* signal, that is asserted for one clock pulse when the value is read.
#. :code:`desc` - extra description of the register.
#. :code:`mode` - ???
#. :code:`reps` - number of instances of given register, useful for defining vector of registers.
#. :code:`stype` - ???
#. :code:`type` - ???
#. :code:`width` - width of the register in bits.

**Example**

.. code-block:: xml

   <sreg name="my_reg" ack="1" default="0x0" desc="Some diagnostic registers." reps="8" width="16" />

:code:`sreg` can contain :code:`field` elements, see :ref:`field`.

subblock
~~~~~~~~
:code:`subblock` element is used to include some block into another block.

Mandatory attributes:

#. :code:`name`- name of the subblock instance within outter block.
#. :code:`type`- type of the subblock.
   This is name of the subblock definition.

Optional attributes:

#. :code:`desc` - extra description of the subblock.
#. :code:`ignore` - ???
#. :code:`reps` - number of instances of given subblock, useful for defining vector of blocks.

**Example**

.. code-block:: xml

   <block name="data_processing">
      <creg name="enable" width="1" />
      <sreg name="throughput" reps="9" ack="1">
         <field name="val" type="unsigned" width="30" />
         <field name="prev_missed" width="1" />
         <field name="read" width="1" />
      </sreg>
   </block>

   <block name="wfifo">
      <creg name="data" mode="non-incremental" stb="1" />
      <sreg name="unused" ack="1" type="unsigned" />
      <sreg name="valid_writes" type="unsigned" />
   </block>

   <block name="main">
      <subblock name="write_fifo" type="wfifo" desc="Some extra description." />
      <subblock name="dproc" type="data_processing" reps="2" />
   </block>

